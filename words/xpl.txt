The infix word $$+$$ adds its two operands.
It is the equivalent of the $$add$$ function.

It operates on these types:
   $$number!$$ $$char!$$ $$pair!$$ $$tuple!$$ $$vector!$$ $$time!$$ $$date!$$

In Red, infix operators are evaluated from left to right, with no precedence.
You may use parentheses ( ) to change the order of evaluation.

In general, the type of the result is the same type as the first operand,
where this is sensible. Errors will result when the types are incompatible.
See examples.

Note the result when vectors of different lengths are added.

The operator $$+$$ is a Red word and thus needs to be separated by whitespace.

When we add two $$vector!$$s, the result is a freshly allocated $$vector!$$.
When we add a $$number!$$ to a $$vector!$$, the original $$vector!$$ will be modified.
.pre
red>> 1 + 3.7
== 4.7

red>> 3 + 100x200
== 103x203

red>> v1: make Vector![3 2 1 4]
== make vector! [3 2 1 4]

red>> v2: make vector![100 200]
== make vector! [100 200]

red>> v1 + v2
== make vector! [103 202]

red>> v1
== make vector! [3 2 1 4]
%%v1 unchanged%%

red>> v2 + v1
== make vector! [103 202]

red>> v1 - 22
== make vector! [-19 -20 -21 -18]
%%v1 altered%%

red>> v1
== make vector! [-19 -20 -21 -18]

red>> 3 + v1
*** Script error: vector type is not allowed here
*** Where: +
